version: 2.1

orbs:
  ruby: circleci/ruby@2.1.0

jobs:
  test:
    docker:
      # Primary container image
      - image: cimg/ruby:3.2.2
        environment:
          RAILS_ENV: test
          DATABASE_URL: postgresql://circleci@127.0.0.1:5432/shot_server_test
          POSTGRES_HOST: 127.0.0.1
          POSTGRES_USER: circleci
          POSTGRES_PASSWORD: ""
          POSTGRES_DB: shot_server_test
      
      # PostgreSQL database
      - image: cimg/postgres:15.0
        environment:
          POSTGRES_USER: circleci
          POSTGRES_DB: shot_server_test
          POSTGRES_PASSWORD: ""
          POSTGRES_HOST_AUTH_METHOD: trust
      
      # Redis
      - image: cimg/redis:7.0
    
    working_directory: ~/repo
    
    steps:
      - checkout
      
      # Install system dependencies
      - run:
          name: Install system dependencies
          command: |
            # Use faster mirrors and retry on failure
            echo "deb http://us.archive.ubuntu.com/ubuntu jammy main restricted universe multiverse" | sudo tee /etc/apt/sources.list
            echo "deb http://us.archive.ubuntu.com/ubuntu jammy-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
            echo "deb http://us.archive.ubuntu.com/ubuntu jammy-security main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
            
            # Retry apt-get update with timeout
            for i in 1 2 3; do
              timeout 60 sudo apt-get update && break || sleep 10
            done
            
            # Install dependencies WITHOUT libvips-dev for now (skip image processing in tests)
            for i in 1 2 3; do
              timeout 120 sudo apt-get install -y libpq-dev postgresql-client pdftk && break || sleep 10
            done
            
            # Install dockerize to wait for services
            wget https://github.com/jwilder/dockerize/releases/download/v0.6.1/dockerize-linux-amd64-v0.6.1.tar.gz
            sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-v0.6.1.tar.gz
            rm dockerize-linux-amd64-v0.6.1.tar.gz
      
      # Cache Ruby gems
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            - v1-dependencies-
      
      # Install Ruby dependencies
      - run:
          name: Install dependencies
          command: |
            # Set test environment to skip ruby-vips
            export RAILS_ENV=test
            
            # Debug gem environment
            echo "Ruby version:"
            ruby -v
            echo "Gem version:"
            gem -v
            echo "Rails environment: $RAILS_ENV"
            
            # Install specific bundler version
            gem install bundler -v 2.4.10
            
            # Configure bundler
            bundle _2.4.10_ config set --local path 'vendor/bundle'
            bundle _2.4.10_ config set --local deployment 'false'
            bundle _2.4.10_ config set --local without 'development'
            
            # Install dependencies
            RAILS_ENV=test bundle _2.4.10_ install --jobs=4 --retry=3
            
            # List installed gems for debugging
            bundle _2.4.10_ list | head -20
      
      # Save cache
      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}
      
      # Wait for database
      - run:
          name: Wait for database
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      
      # Setup credentials
      - run:
          name: Setup test credentials
          command: |
            if [ -n "$RAILS_TEST_KEY" ]; then
              # Remove any whitespace/newlines and write key
              echo -n "$RAILS_TEST_KEY" | tr -d '\n\r ' > config/credentials/test.key
              
              # Debug output
              echo "RAILS_TEST_KEY length from env: ${#RAILS_TEST_KEY}"
              echo "Test key file created with content length: $(wc -c < config/credentials/test.key) characters"
              echo "First 8 chars of key: $(head -c 8 config/credentials/test.key)..."
              echo "Last 8 chars of key: ...$(tail -c 8 config/credentials/test.key)"
              
              # Verify it's exactly 32 characters
              KEY_LENGTH=$(wc -c < config/credentials/test.key)
              if [ "$KEY_LENGTH" -ne 32 ]; then
                echo "ERROR: Key length is $KEY_LENGTH, expected 32"
                exit 1
              fi
            else
              echo "ERROR: RAILS_TEST_KEY not set in CircleCI environment variables"
              exit 1
            fi
            
      # Database setup
      - run:
          name: Database setup
          command: |
            RAILS_ENV=test bundle _2.4.10_ exec rails db:create
            RAILS_ENV=test bundle _2.4.10_ exec rails db:schema:load
            
      # Test RSpec setup first
      - run:
          name: Test RSpec setup
          command: |
            echo "Testing RSpec setup with a single model spec..."
            timeout 60 bash -c "RAILS_ENV=test DISABLE_BOOTSNAP=1 DISABLE_SPRING=1 bundle _2.4.10_ exec rspec spec/models/user_spec.rb --format documentation" || echo "Test setup check completed/timed out"
          no_output_timeout: 2m
            
      # Run RSpec tests
      - run:
          name: Run tests
          command: |
            mkdir /tmp/test-results
            echo "Starting full RSpec test suite..."
            RAILS_ENV=test DISABLE_BOOTSNAP=1 DISABLE_SPRING=1 bundle _2.4.10_ exec rspec \
                            --format documentation \
                            --format RspecJunitFormatter \
                            --out /tmp/test-results/rspec.xml \
                            --fail-fast
            TEST_RESULT=$?
            if [ $TEST_RESULT -ne 0 ]; then
              echo "Tests failed with exit code $TEST_RESULT"
              exit $TEST_RESULT
            fi
          no_output_timeout: 3m
      
      # Store test results for CircleCI
      - store_test_results:
          path: /tmp/test-results
      
      # Store test artifacts
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

workflows:
  version: 2
  test:
    jobs:
      - test